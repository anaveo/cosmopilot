import 'package:dijkstra/dijkstra.dart';

List<List<int>> terrain = [[5, 5, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 6, 5, 6, 7, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 8, 8],
                           [5, 5, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 6, 5, 6, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8],
                           [5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 8, 8, 7, 7, 7, 7, 6, 7, 6, 6, 7, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8],
                           [5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 8, 8, 8, 8, 6, 7, 6, 6, 6, 6, 6, 5, 7, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8],
                           [5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 8, 8, 7, 6, 7, 6, 6, 5, 8, 5, 5, 6, 7, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 5, 4, 7, 5, 6, 6, 5, 6, 6, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 8, 7, 7, 7, 7, 6, 6, 6, 5, 2, 5, 8, 5, 5, 6, 6, 7, 6, 6, 7, 7, 8, 7, 8, 8, 8, 8, 8],
                           [5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 7, 7, 7, 6, 6, 6, 4, 2, 2, 7, 7, 5, 7, 8, 7, 7, 7, 6, 6, 7, 8, 7, 8, 7, 7, 7, 8],
                           [5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 8, 8, 8, 7, 6, 6, 4, 0, 2, 4, 6, 7, 6, 7, 8, 8, 7, 6, 6, 6, 7, 7, 7, 8, 8, 7, 7, 7],
                           [5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 8, 8, 8, 7, 6, 4, 0, 2, 5, 4, 7, 7, 5, 7, 7, 7, 8, 7, 6, 6, 6, 7, 8, 7, 7, 7, 7, 7],
                           [5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 8, 8, 8, 6, 4, 2, 1, 4, 5, 5, 8, 5, 5, 6, 7, 7, 7, 5, 7, 7, 8, 8, 7, 6, 6, 6, 7, 7],
                           [5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 8, 8, 7, 6, 4, 3, 1, 2, 5, 4, 6, 8, 7, 7, 7, 7, 7, 7, 8, 8, 6, 6, 6, 6, 6, 6, 6, 7, 7],
                           [5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 6, 7, 8, 6, 4, 4, 2, 0, 4, 5, 5, 7, 7, 6, 6, 7, 8, 8, 7, 7, 7, 6, 5, 7, 6, 5, 5, 5, 6, 6],
                           [5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 3, 2, 1, 5, 4, 7, 8, 7, 7, 6, 6, 7, 7, 5, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5],
                           [5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 6, 6, 5, 4, 3, 1, 3, 4, 6, 8, 7, 5, 5, 5, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 4, 5, 4, 4, 4],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 3, 2, 3, 4, 5, 7, 6, 6, 5, 6, 6, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 3, 3, 2, 5, 5, 5, 5, 7, 5, 4, 7, 7, 7, 8, 7, 7, 7, 7, 6, 5, 5, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 6, 4, 2, 5, 5, 5, 5, 6, 7, 4, 4, 6, 7, 7, 7, 6, 6, 7, 6, 6, 5, 4, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 6, 6, 5, 2, 4, 5, 5, 5, 7, 6, 4, 4, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 3, 3, 5, 5, 5, 5, 7, 6, 4, 5, 7, 6, 7, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 5, 5, 5, 5, 6, 6, 4, 4, 3, 3, 5, 5, 5, 5, 6, 8, 6, 4, 6, 7, 7, 7, 4, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 5, 5, 5, 5, 6, 7, 4, 5, 3, 4, 5, 5, 5, 6, 7, 8, 4, 5, 6, 7, 7, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 3, 5, 7, 6, 7, 8, 8, 8, 4, 5, 7, 7, 7, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 5, 5, 6, 6, 6, 6, 5, 3, 4, 6, 7, 6, 7, 6, 6, 5, 5, 6, 7, 7, 7, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 6, 6, 6, 6, 6, 7, 3, 3, 6, 7, 5, 6, 5, 5, 5, 4, 5, 6, 7, 7, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
                           [5, 5, 5, 6, 6, 6, 6, 7, 6, 3, 5, 7, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 5],
                           [5, 5, 6, 6, 6, 6, 7, 7, 6, 4, 7, 7, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5],
                           [5, 5, 6, 6, 6, 6, 7, 6, 4, 7, 8, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 6, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 6, 6, 5, 5],
                           [5, 5, 6, 6, 6, 6, 7, 5, 7, 8, 7, 5, 5, 5, 4, 5, 6, 6, 6, 7, 7, 7, 6, 5, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5],
                           [5, 5, 6, 7, 7, 7, 5, 7, 8, 7, 6, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 6, 5, 5, 5, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
                           [5, 5, 5, 7, 6, 5, 6, 8, 7, 6, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 6, 5, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
                           [5, 5, 6, 7, 6, 5, 8, 7, 7, 6, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 7, 6, 6, 5, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
                           [5, 5, 6, 6, 6, 6, 7, 6, 8, 7, 6, 6, 5, 5, 5, 6, 8, 8, 8, 8, 7, 7, 6, 6, 5, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5],
                           [5, 5, 5, 7, 5, 6, 7, 6, 6, 5, 6, 5, 5, 5, 5, 6, 7, 7, 7, 8, 7, 6, 6, 6, 5, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6],
                           [5, 5, 6, 7, 6, 6, 7, 6, 6, 4, 5, 6, 6, 5, 5, 6, 7, 7, 7, 7, 7, 7, 6, 6, 5, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6],
                           [5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 7, 6, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
                           [5, 5, 5, 5, 4, 5, 5, 5, 4, 5, 5, 4, 5, 6, 4, 5, 6, 7, 8, 8, 8, 7, 7, 6, 5, 6, 6, 6, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 5, 7, 8, 8, 8, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 4, 6, 5, 5, 5, 6, 7, 7, 8, 8, 7, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6],
                           [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 7, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6]];

Map<int, Map<int, int>> graph = {};
void convertToGraph(List<List<int>> data){
  int curKey = 0;
  // iterate over all rows of input data
  for (int i = 0; i < data.length; i++) {
    // iterate over all columns of input data
    for (int j = 0; j < data[0].length; j++) {
      graph[curKey] = {};            // initialize a K,V pair using current clk
      // establish neighbor connections
      if (i != data.length - 1) {    // ensure not at bottom edge of dataset
        graph[curKey]?.addAll({curKey + data[0].length : 1}); // bottom neighbor
      }
      if (i != 0) {             // ensure not at top edge of dataset
        graph[curKey]?.addAll({curKey - data[0].length : 1}); // upper neighbor
      }
      if (j != data[0].length - 1) { // ensure not at right edge of dataset
        graph[curKey]?.addAll({curKey + 1 : 1});              // right neighbor
      }
      if (j != 0) {             // ensure not at left edge of dataset
        graph[curKey]?.addAll({curKey - 1 : 1});              // left neighbor
      }
      curKey++;
    }
  }
}

List<dynamic> dijkstras(Map<int, Map<int, int>> adjacency, int start, int finish) {
  List<dynamic> solutionArray;

  solutionArray = Dijkstra.findPathFromGraph(adjacency, start, finish);
  return solutionArray;
}

int main() {
  convertToGraph(terrain);
  print(dijkstras(graph, 1276, 589));
  return 0;
}
